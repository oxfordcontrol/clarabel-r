[{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Clarabel Solver Examples","text":"first two examples original Clarabel documentation third SCS.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"basic-quadratic-program-example","dir":"Articles","previous_headings":"","what":"1. Basic Quadratic Program Example","title":"Clarabel Solver Examples","text":"Suppose want solve following 2-dimensional quadratic programming problem: minimize3x12+2x22‚àíx1‚àí4x2subject ‚àí1‚â§x‚â§1,x1=2x2 \\begin{array}{ll} \\text{minimize} &  3x_1^2 + 2x_2^2 - x_1 - 4x_2\\\\ \\text{subject } &  -1 \\leq x \\leq 1, ~ x_1 = 2x_2 \\end{array} show solve problem using Clarabel R. first step put problem data standard form expected solver.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"objective-function","dir":"Articles","previous_headings":"1. Basic Quadratic Program Example","what":"1.1. Objective function","title":"Clarabel Solver Examples","text":"Clarabel solver‚Äôs default configuration expects problem data form 12x‚ä§Px+q‚ä§x\\frac{1}{2}x^\\top P x + q^\\top x. therefore define objective function data P=2‚ãÖ[3002] q=[‚àí1‚àí4]. P = 2 \\cdot \\begin{bmatrix} 3 & 0 \\\\ 0 & 2\\end{bmatrix} \\mbox{ } q = \\begin{bmatrix} -1 \\\\ -4\\end{bmatrix}.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"constraints","dir":"Articles","previous_headings":"1. Basic Quadratic Program Example","what":"1.2. Constraints","title":"Clarabel Solver Examples","text":"solver‚Äôs default configuration expects constraints form Ax+s=bAx + s = b, s‚ààùí¶s \\\\mathcal{K} composite cone ùí¶\\mathcal{K}. 1 equality constraint 4 inequalities, require first element ss zero (.e.¬†first constraint correspond equality) elements si‚â•0s_i \\ge 0. cone constraint ss therefore s‚ààùí¶={0}1√ó‚Ñù‚â•04. s \\\\mathcal K = \\{0\\}^1 \\times \\mathbb{R}^4_{\\ge 0}. Define constraint data =[1‚àí21001‚àí100‚àí1] b=[01111]. = \\begin{bmatrix} 1 & -2 \\\\ 1 & 0 \\\\ 0 & 1 \\\\ -1 & 0 \\\\ 0 & -1\\end{bmatrix} \\mbox{ } b=\\begin{bmatrix} 0 \\\\ 1 \\\\ 1 \\\\ 1 \\\\ 1 \\end{bmatrix}. Note Clarabel expects inputs Compressed Sparse Column (CSC) format PP AA try convert .","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"solution","dir":"Articles","previous_headings":"1. Basic Quadratic Program Example","what":"1.3. Solution","title":"Clarabel Solver Examples","text":"","code":"P <- Matrix::Matrix(2 * c(3, 0, 0, 2), nrow = 2, ncol = 2, sparse = TRUE) P <- as(P, \"symmetricMatrix\")  # P needs to be a symmetric matrix q <- c(-1, -4) A <- Matrix::Matrix(c(1, 1, 0, -1, 0, -2, 0, 1, 0, -1), ncol = 2, sparse = TRUE) b <- c(0, 1, 1, 1, 1) cones <- list(z = 1L, l = 4L)  ## 1 equality and 4 inequalities, in order s <- clarabel(A = A, b = b, q = q, P = P, cones = cones) cat(sprintf(\"Solution status, description: = (%d, %s)\\n\",             s$status, solver_status_descriptions()[s$status])) #> Solution status, description: = (2, Solver terminated with a solution.) cat(sprintf(\"Solution: (x1, x2) = (%f, %f)\\n\", s$x[1], s$x[2])) #> Solution: (x1, x2) = (0.428571, 0.214286)"},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"basic-second-order-cone-programming-example","dir":"Articles","previous_headings":"","what":"2. Basic Second-order Cone Programming Example","title":"Clarabel Solver Examples","text":"want solve following 2-dimensional optimization problem: minimizex22subject ‚à•(2x1x2)‚àí(22)‚à•2‚â§1 \\begin{array}{ll} \\text{minimize} & x_2^2\\\\[2ex] \\text{subject } &  \\left\\|\\begin{pmatrix} 2x_1 \\\\ x_2 \\end{pmatrix} - \\begin{pmatrix} 2 \\\\ 2 \\end{pmatrix}\\right\\|_2 \\le 1 \\end{array}","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"objective-function-1","dir":"Articles","previous_headings":"2. Basic Second-order Cone Programming Example","what":"2.1. Objective function","title":"Clarabel Solver Examples","text":"Clarabel solver‚Äôs default configuration expects problem data form 12x‚ä§Px+q‚ä§x\\frac{1}{2}x^\\top P x + q^\\top x. therefore define objective function data P=2‚ãÖ[0001] q=[00]. P = 2 \\cdot \\begin{bmatrix} 0 & 0 \\\\ 0 & 1\\end{bmatrix} \\mbox{ } q = \\begin{bmatrix} 0 \\\\ 0\\end{bmatrix}.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"constraints-1","dir":"Articles","previous_headings":"2. Basic Second-order Cone Programming Example","what":"2.2. Constraints","title":"Clarabel Solver Examples","text":"solver‚Äôs default configuration expects constraints form Ax+s=bAx + s = b, s‚ààùí¶s \\\\mathcal{K} composite cone ùí¶\\mathcal{K}. single constraint 2-norm vector, rewrite ‚à•(2x1x2)‚àí(22)‚à•2‚â§1‚áî(12x1‚àí2x2‚àí2)‚ààùí¶SOC \\left\\|\\begin{pmatrix} 2x_1 \\\\ x_2 \\end{pmatrix} - \\begin{pmatrix} 2 \\\\ 2 \\end{pmatrix}\\right\\|_2 \\le 1 \\quad \\Longleftrightarrow \\quad \\begin{pmatrix} 1 \\\\ 2x_1 - 2\\\\ x_2 - 2 \\end{pmatrix} \\\\mathcal{K}_{SOC}  puts constraint form b‚àíAx‚ààùí¶SOCb - Ax \\\\mathcal{K}_{SOC}.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"solution-1","dir":"Articles","previous_headings":"2. Basic Second-order Cone Programming Example","what":"2.3. Solution","title":"Clarabel Solver Examples","text":"","code":"P <- Matrix::Matrix(2 * c(0, 0, 0, 1), nrow = 2, ncol = 2, sparse = TRUE) P <- as(P, \"symmetricMatrix\") # P needs to be a symmetric matrix q <- c(0, 0) A <- Matrix::Matrix(c(0, -2.0, 0, 0, 0, 1.0), nrow = 3, ncol = 2, sparse = TRUE) b <- c(1, -2, -2) cones <- list(q = 3L) s <- clarabel(A = A, b = b, q = q, P = P, cones = cones) cat(sprintf(\"Solution status, description: = (%d, %s)\\n\",             s$status, solver_status_descriptions()[s$status])) #> Solution status, description: = (2, Solver terminated with a solution.) cat(sprintf(\"Solution (x1, x2) = (%f, %f)\\n\", s$x[1], s$x[2])) #> Solution (x1, x2) = (1.000000, -1.000000)"},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"semidefinite-cone-programming","dir":"Articles","previous_headings":"","what":"3. Semidefinite Cone Programming","title":"Clarabel Solver Examples","text":"Semidefinite cones specified particular form. borrow documentation SCS solver similar calling conventions. symmetric positive semidefinite cone matrices set {S‚ààùêëk√ók‚à£S=S‚ä§,x‚ä§Sx‚â•0‚àÄx‚àà‚Ñùk} \\{S \\\\mathbf{R}^{k \\times k} \\mid  S = S^\\top,  x^\\top S x \\geq 0 \\ \\forall x \\\\mathbb{R}^k \\} short, use S‚âΩ0S \\succeq 0 denote membership. Clarabel vectorizes cone special way detail . Clarabel assumes input data corresponding semidefinite cones vectorized scaling -diagonal entries 2\\sqrt{2} stacking upper triangular elements column-wise. (SCS uses lower triangular elements.) k√ókk \\times k matrix variable (data matrix) operation create vector length k(k+1)/2k(k+1)/2. Scaling 2\\sqrt{2} required preserve inner-product. must done rows AA bb correspond semidefinite cones must done independently semidefinite cone. explicitly, want express Trace(YS)\\text{Trace}(Y S) vec(Y)‚ä§vec(S)\\text{vec}(Y)^\\top \\text{vec}(S), vec\\text{vec} operation takes (assumed symmetric) k√ókk \\times k matrix S=[S11S12‚Ä¶S1kS21S22‚Ä¶S2k‚ãÆ‚ãÆ‚ã±‚ãÆSk1Sk2‚Ä¶Skk] \\begin{aligned} S =  \\begin{bmatrix}         S_{11} & S_{12} & \\ldots & S_{1k}  \\\\         S_{21} & S_{22} & \\ldots & S_{2k}  \\\\         \\vdots & \\vdots & \\ddots & \\vdots  \\\\         S_{k1} & S_{k2} & \\ldots & S_{kk}  \\\\       \\end{bmatrix} \\end{aligned} produces vector consisting upper triangular elements scaled arranged vec(S)=(S11,2S12,S22,2S13,‚Ä¶,2S1k,2S2k,2S3k,‚Ä¶,2Sk‚àí1,k,Skk)‚àà‚Ñùk(k+1)/2. \\text{vec}(S) = (S_{11}, \\sqrt{2} S_{12}, S_{22}, \\sqrt{2}S_{13}, \\ldots, \\sqrt{2} S_{1k}, \\sqrt{2}S_{2k}, \\sqrt{2}S_{3k}, \\dots, \\sqrt{2}S_{k-1,k}, S_{kk}) \\\\mathbb{R}^{k(k+1)/2}. recover matrix solution operation must inverted components vectors returned Clarabel corresponding semidefinite cone. , -diagonal entries must scaled 1/21/\\sqrt{2} upper triangular entries filled copying values lower triangular entries. Explicitly, inverse operation takes vector s‚àà‚Ñùk(k+1)/2s \\\\mathbb{R}^{k(k+1)/2} produces matrix mat(s)=[s1s2/2‚Ä¶sk(k‚àí1)/2‚àí1/2s2/2s3‚Ä¶sk(k‚àí1)/2/2‚ãÆ‚ãÆ‚ã±‚ãÆsk(k‚àí1)/2‚àí1/2sk(k‚àí1)/2/2‚Ä¶sk(k+1)/2]‚àà‚Ñùk√ók. \\begin{aligned} \\text{mat}(s) =  \\begin{bmatrix} s_{1} & s_{2} / \\sqrt{2} & \\ldots & s_{k(k-1)/2-1} / \\sqrt{2}  \\\\ s_{2} / \\sqrt{2} & s_{3} & \\ldots & s_{k(k-1)/2} / \\sqrt{2}  \\\\ \\vdots & \\vdots & \\ddots & \\vdots  \\\\ s_{k(k-1)/2-1} / \\sqrt{2} & s_{k(k-1)/2} / \\sqrt{2} & \\ldots & s_{k(k+1) / 2}  \\\\ \\end{bmatrix} \\\\mathbb{R}^{k \\times k}. \\end{aligned} cone definition Clarabel uses ùíÆ+k={vec(S)‚à£S‚âΩ0}={s‚àà‚Ñùk(k+1)/2‚à£mat(s)‚âΩ0}. \\mathcal{S}_+^k = \\{ \\text{vec}(S) \\mid S \\succeq 0\\} = \\{s \\\\mathbb{R}^{k(k+1)/2} \\mid \\text{mat}(s) \\succeq 0 \\}. two functions implement vec\\text{vec} mat\\text{mat}.","code":"#' Return an vectorization of symmetric matrix using the upper triangular part, #' still in column order. #' @param S a symmetric matrix #' @return vector of values vec <- function(S) {   n <- nrow(S)   sqrt2 <- sqrt(2.0)   upper_tri <- upper.tri(S, diag = FALSE)   S[upper_tri] <- S[upper_tri] * sqrt2   S[upper.tri(S, diag = TRUE)] }  #' Return the symmetric matrix from the [vec] vectorization #' @param v a vector #' @return a symmetric matrix mat <- function(v) {   n <- (sqrt(8 * length(v) + 1) - 1) / 2   sqrt2 <- sqrt(2.0)   S <- matrix(0, n, n)   upper_tri <- upper.tri(S, diag = TRUE)   S[upper_tri] <- v / sqrt2   S <- S + t(S)   diag(S) <- diag(S) / sqrt(2)   S }"},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"example","dir":"Articles","previous_headings":"3. Semidefinite Cone Programming","what":"3.1. Example","title":"Clarabel Solver Examples","text":"Consider problem: minimizex1‚àíx2+x3subject toB1‚àíA11x1‚àíA12x2‚àíA13x3‚âΩ0B2‚àíA21x1‚àíA22x2‚àíA23x3‚âΩ0 \\begin{array}{ll} \\text{minimize} &  x_1 - x_2 + x_3\\\\ \\text{subject } & B_1 - A_{11}x_1 - A_{12}x_2 - A_{13}x_3 \\succeq 0\\\\                   & B_2 - A_{21}x_1 - A_{22}x_2 - A_{23}x_3 \\succeq 0 \\end{array}  A11=[‚àí7‚àí11‚àí113], A12=[7‚àí18‚àí188], A13=[‚àí2‚àí8‚àí81], A_{11}=\\begin{bmatrix} -7 & -11 \\\\ -11 & 3\\end{bmatrix}\\mbox{, } A_{12}=\\begin{bmatrix} 7 & -18 \\\\ -18 & 8\\end{bmatrix}\\mbox{, } A_{13}=\\begin{bmatrix} -2 & -8 \\\\ -8 & 1\\end{bmatrix}, A21=[‚àí21‚àí110‚àí11108085], A22=[0101610‚àí10‚àí1016‚àí103], A23=[‚àí52‚àí172‚àí68‚àí1786], A_{21}=\\begin{bmatrix} -21 & -11 & 0\\\\ -11 & 10 & 8\\\\ 0 & 8 & 5\\end{bmatrix}\\mbox{, } A_{22}=\\begin{bmatrix} 0 & 10 & 16\\\\ 10 & -10 & -10\\\\ 16 & -10 & 3\\end{bmatrix}\\mbox{, } A_{23}=\\begin{bmatrix} -5 & 2 & -17\\\\ 2 & -6 & 8\\\\ -17 & 8 & 6\\end{bmatrix}, B1=[33‚àí9‚àí926], B2=[1494099110401015]. B_1=\\begin{bmatrix} 33 & -9 \\\\ -9 & 26\\end{bmatrix}\\mbox{, } B_2=\\begin{bmatrix} 14 & 9 & 40\\\\ 9 & 91 & 10\\\\ 40 & 10 & 15\\end{bmatrix}. constraints involve symmetric positive semidefinite cones variables x‚àà‚Ñùnx \\\\mathbb{R}^n S‚àà‚Ñùk√ókS \\\\mathbb{R}^{k \\times k} B‚àí‚àë=1nùíúixi=S‚âΩ0 B - \\sum_{=1}^n \\mathcal{}_i x_i = S \\succeq 0 data B,ùíú1,‚Ä¶,ùíún‚àà‚Ñùk√ókB, \\mathcal{}_1, \\ldots, \\mathcal{}_n \\\\mathbb{R}^{k \\times k} symmetric. can write canonical form new variable s‚ààùíÆ+ks \\\\mathcal{S}_+^k: s=vec(S)=vec(B‚àí‚àë=1nùíúixi)=vec(B)‚àí‚àë=1nvec(ùíúi)xi=b‚àíAx \\begin{aligned} \\begin{align} s &= \\text{vec}(S)\\\\ &= \\text{vec}(B - \\sum_{=1}^n \\mathcal{}_i x_i) \\\\ &= \\text{vec}(B) - \\sum_{=1}^n \\text{vec}(\\mathcal{}_i) x_i \\\\ &= b - Ax \\end{align} \\end{aligned} using fact vec\\text{vec} linear, b=vec(B)b = \\text{vec}(B) =[vec(ùíú1)vec(ùíú2)‚ãØvec(ùíún)] = \\begin{bmatrix} \\text{vec}(\\mathcal{}_1) & \\text{vec}(\\mathcal{}_2) & \\cdots & \\text{vec}(\\mathcal{}_n) \\end{bmatrix} .e., vectors vec(ùíúi)\\text{vec}(\\mathcal{}_i) stacked columnwise. form can input Clarabel. recover matrix solution optimal solution returned Clarabel, simply use S‚ãÜ=mat(s‚ãÜ)S^\\star = \\text{mat}(s^\\star). two constraints therefore construct vectors cones order specify appropriate dimensions, 2 3, respectively.","code":"q <- c(1, -1, 1) # objective: x_1 - x2 + x_3 A11 <- matrix(c(-7, -11, -11, 3), nrow = 2) A12 <- matrix(c(7, -18, -18, 8), nrow = 2) A13 <- matrix(c(-2, -8, -8, 1), nrow = 2)  A21 <- matrix(c(-21, -11, 0, -11, 10, 8, 0, 8, 5), nrow = 3) A22 <- matrix(c(0, 10, 16, 10, -10, -10, 16, -10, 3), nrow = 3) A23 <- matrix(c(-5, 2, -17, 2, -6, 8, -17, 8, 6), nrow = 3)  B1 <- matrix(c(33, -9, -9, 26), nrow = 2) B2 <- matrix(c(14, 9, 40, 9, 91, 10, 40, 10, 15), nrow = 3)  A <- rbind(   cbind(vec(A11), vec(A12), vec(A13)), # first psd constraint   cbind(vec(A21), vec(A22), vec(A23))  # second psd constraint ) b <- c(vec(B1), vec(B2)) # stack both psd constraints cones <- list(s = c(2, 3)) # cone dimensions s <- clarabel(A = A, b = b, q = q, cones = cones) cat(sprintf(\"Solution status, description: = (%d, %s)\\n\",             s$status, solver_status_descriptions()[s$status])) #> Solution status, description: = (2, Solver terminated with a solution.) cat(sprintf(\"Solution (x1, x2, x3) = (%f, %f, %f)\\n\", s$x[1], s$x[2], s$x[3])) #> Solution (x1, x2, x3) = (-0.367746, 1.898333, -0.887466)"},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"cone-specifications","dir":"Articles","previous_headings":"","what":"4. Cone Specifications","title":"Clarabel Solver Examples","text":"following cones can specified Clarabel. Generalized power cone parameters specified list two-item lists, component named aa denoting exponents named component nn denoting dimension. One can specify cones order strict_cone_order set FALSE call clarabel() one ensure parameter types strictly specified values, e.g.¬†5L integers, 0. reals etc.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/articles/clarabel.html","id":"control-parameters","dir":"Articles","previous_headings":"","what":"5. Control parameters","title":"Clarabel Solver Examples","text":"Clarabel number parameters control behavior, including verbosity, time limits, tolerances; see help clarabel_control(). example, last problem, can reduce number iterations. Note different status, always checked code.","code":"P <- Matrix::Matrix(2 * c(0, 0, 0, 1), nrow = 2, ncol = 2, sparse = TRUE) P <- as(P, \"symmetricMatrix\") # P needs to be a symmetric matrix q <- c(0, 0) A <- Matrix::Matrix(c(0, -2.0, 0, 0, 0, 1.0), nrow = 3, ncol = 2, sparse = TRUE) b <- c(1, -2, -2) cones <- list(q = 3L) s <- clarabel(A = A, b = b, q = q, P = P, cones = cones,               control = list(max_iter = 3)) ## Reduced number of iterations cat(sprintf(\"Solution status, description: = (%d, %s)\\n\",             s$status, solver_status_descriptions()[s$status])) #> Solution status, description: = (5, Solver terminated with a solution (reduced accuracy)) cat(sprintf(\"Solution (x1, x2) = (%f, %f)\\n\", s$x[1], s$x[2])) #> Solution (x1, x2) = (1.000000, -0.999998)"},{"path":"https://oxfordcontrol.github.io/clarabel-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Balasubramanian Narasimhan. Author, maintainer. Paul Goulart. Author, copyright holder. Yuwen Chen. Author. Hiroaki Yutani. Contributor.           vendoring/Makefile hints/R scripts generating crate authors/licenses David Zimmermann-Kollenda. Contributor.           configure scripts tools/msvr.R lifted rtiktoken package authors dependency Rust crates. Contributor.           see inst/AUTHORS file details","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goulart PJ, Chen Y (2024). ‚ÄúClarabel: interior-point solver conic programs quadratic objectives.‚Äù doi:10.48550/arXiv.2405.12762, 2405.12762. Garstka M, Cannon M, Goulart P (2020). ‚Äúclique graph based merging strategy decomposable SDPs.‚Äù IFAC-PapersOnLine, volume 53 number 2, 7355-7361. doi:10.1016/j.ifacol.2020.12.1255, 21th IFAC World Congress. Chen Y, Goulart P (2023). ‚ÄúEfficient IPM Implementation Class Nonsymmetric Cones.‚Äù doi:10.48550/arXiv.2305.12275, 2305.12275.","code":"@Misc{Clarabel_2024,   title = {Clarabel: An interior-point solver for conic programs with quadratic objectives},   author = {Paul J. Goulart and Yuwen Chen},   year = {2024},   eprint = {2405.12762},   archiveprefix = {arXiv},   doi = {10.48550/arXiv.2405.12762},   primaryclass = {math.OC}, } @InProceedings{Garstka_2020,   author = {Michael Garstka and Mark Cannon and Paul Goulart},   title = {A clique graph based merging strategy for decomposable {SDPs}},   booktitle = {IFAC-PapersOnLine},   year = {2020},   note = {21th IFAC World Congress},   number = {2},   pages = {7355-7361},   volume = {53},   doi = {10.1016/j.ifacol.2020.12.1255},   issn = {2405-8963},   journal = {IFAC-PapersOnLine}, } @Misc{chen2023efficient,   title = {An Efficient IPM Implementation for A Class of Nonsymmetric Cones},   author = {Yuwen Chen and Paul Goulart},   year = {2023},   eprint = {2305.12275},   archiveprefix = {arXiv},   doi = {10.48550/arXiv.2305.12275},   primaryclass = {math.OC}, }"},{"path":"https://oxfordcontrol.github.io/clarabel-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Additional details","title":"Authors and Citation","text":"","code":"The authors of the dependency Rust crates: aho-corasick (version 1.1.3):   Andrew Gallant  amd (version 0.2.2):   autocfg (version 1.3.0):   Josh Stone  blas-src (version 0.10.0):   Balasubramanian Narasimhan   Ivan Ukhov   Jed Brown   Michael Zietz   Stefan Kroboth   Toshiki Teramura   bluss  blas-sys (version 0.7.1):   Andrew Straw   Corey Richardson   Ivan Ukhov   bluss  blas (version 0.22.0):   Andrew Straw   Corey Richardson   Ivan Ukhov   Mason Smith   Toshiki Teramura  cc (version 1.0.99):   Alex Crichton  cfg-if (version 1.0.0):   Alex Crichton  clarabel (version 0.9.0):   Paul Goulart  darling_core (version 0.14.4):   Ted Driggs  darling_macro (version 0.14.4):   Ted Driggs  darling (version 0.14.4):   Ted Driggs  derive_builder_core (version 0.11.2):   Colin Kiegel   Pascal Hertleif   Jan-Erik Rediger   Ted Driggs  derive_builder_macro (version 0.11.2):   Colin Kiegel   Pascal Hertleif   Jan-Erik Rediger   Ted Driggs  derive_builder (version 0.11.2):   Colin Kiegel   Pascal Hertleif   Jan-Erik Rediger   Ted Driggs  either (version 1.12.0):   bluss  enum_dispatch (version 0.3.13):   Anton Lazarev  equivalent (version 1.0.1):   fnv (version 1.0.7):   Alex Crichton  hashbrown (version 0.14.5):   Amanieu d'Antras  ident_case (version 1.0.1):   Ted Driggs  indexmap (version 2.2.6):   itertools (version 0.11.0):   bluss  itoa (version 1.0.11):   David Tolnay  lapack-src (version 0.10.0):   Balasubramanian Narasimhan   Ivan Ukhov   Michael Zietz   Mitsutoshi Aoe   Stefan Kroboth   Toshiki Teramura  lapack-sys (version 0.14.0):   Andrew Straw   Corey Richardson   Ivan Ukhov   Toshiki Teramura  lapack (version 0.19.0):   Andrew Straw   Crozet S√©bastien   David Greenberg   Ivan Ukhov   Pavel Potocek   Selvavignesh Vedamanickam   Toshiki Teramura  lazy_static (version 1.4.0):   Marvin L√∂bel  libc (version 0.2.155):   The Rust Project Developers  memchr (version 2.7.4):   Andrew Gallant   bluss  num-complex (version 0.4.6):   The Rust Project Developers  num-traits (version 0.2.19):   The Rust Project Developers  once_cell (version 1.19.0):   Aleksey Kladov  proc-macro2 (version 1.0.85):   David Tolnay   Alex Crichton  quote (version 1.0.36):   David Tolnay  r-src (version 0.1.0):   Balasubramanian Narasimhan  regex-automata (version 0.4.7):   The Rust Project Developers   Andrew Gallant  regex-syntax (version 0.8.4):   The Rust Project Developers   Andrew Gallant  regex (version 1.10.5):   The Rust Project Developers   Andrew Gallant  ryu (version 1.0.18):   David Tolnay  savvy-bindgen (version 0.6.4):   Hiroaki Yutani  savvy-ffi (version 0.6.4):   Hiroaki Yutani  savvy-macro (version 0.6.4):   Hiroaki Yutani  savvy (version 0.6.4):   Hiroaki Yutani  serde_derive (version 1.0.203):   Erick Tryzelaar   David Tolnay  serde_json (version 1.0.117):   Erick Tryzelaar   David Tolnay  serde (version 1.0.203):   Erick Tryzelaar   David Tolnay  strsim (version 0.10.0):   Danny Guo  syn (version 1.0.109):   David Tolnay  syn (version 2.0.66):   David Tolnay  thiserror-impl (version 1.0.61):   David Tolnay  thiserror (version 1.0.61):   David Tolnay  unicode-ident (version 1.0.12):   David Tolnay"},{"path":"https://oxfordcontrol.github.io/clarabel-r/index.html","id":"clarabel-","dir":"","previous_headings":"","what":"Interior Point Conic Optimization Solver","title":"Interior Point Conic Optimization Solver","text":"R interface Clarabel interior point conic optimization solver Oxford Control Group. Stable versions can installed CRAN usual. Development versions repo can installed via: code assumes availability Cargo/Rust infrastructure R compilation tools install source, freely available. clarabel package site package details including vignette.","code":"## Install remotes packages if not available if (! \"remotes\" %in% installed.packages()[, 1] ) {     install.packages(\"remotes\", repository = \"https://cran.r-project.org\") } remotes::install_github(\"oxfordcontrol/clarabel-r\")"},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to Clarabel solver implemented in Rust. ‚Äî clarabel-package","title":"Interface to Clarabel solver implemented in Rust. ‚Äî clarabel-package","text":"Clarabel versatile interior point solver convex programs using new homogeneous embedding. solves solves linear programs (LPs), quadratic programs (QPs), second-order cone programs (SOCPs), problems exponential power cone constraints. quadratic objectives, unlike interior point solvers based standard homogeneous self-dual embedding (HSDE) model, Clarabel handles quadratic objective without requiring epigraphical reformulation objective function. can therefore significantly faster HSDE-based solvers problems quadratic objective functions. Infeasible problems detected using homogeneous embedding technique. See https://clarabel.org/stable/.","code":""},{"path":[]},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interface to Clarabel solver implemented in Rust. ‚Äî clarabel-package","text":"Balasubramanian Narasimhan, Paul Goulart, Yuwen Chen","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"Clarabel solves linear programs (LPs), quadratic programs (QPs), second-order cone programs (SOCPs) semidefinite programs (SDPs). also solves problems exponential power cone constraints. specific problem solved : Minimize $$\\frac{1}{2}x^TPx + q^Tx$$ subject $$Ax + s =   b$$ $$s \\K$$ \\(x \\R^n\\), \\(s \\R^m\\), \\(P   = P^T\\) nonnegative-definite, \\(q \\R^n\\), \\(\\  R^{m\\times n}\\), \\(b \\R^m\\). set \\(K\\) composition convex cones.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"","code":"clarabel(A, b, q, P = NULL, cones, control = list(), strict_cone_order = TRUE)"},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"matrix constraint coefficients. b numeric vector giving primal constraints q numeric vector giving primal objective P symmetric positive semidefinite matrix, default NULL cones named list giving cone sizes, see ‚ÄúCone Parameters‚Äù specification control list giving specific control parameters use place default values, empty list indicating default control parameters. Specified parameters correctly named typed avoid Rust system panics sanitization done efficiency reasons strict_cone_order logical flag, default TRUE forcing order cones described . FALSE cones can specified order even repeated directly passed solver without type length checks","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"named list solution vectors x, y, s information run","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"order rows matrix \\(\\) correspond order given table ‚ÄúCone Parameters‚Äù, means means rows corresponding primal zero cones first, rows corresponding non-negative cones second, rows corresponding second-order cone third, rows corresponding positive semidefinite cones fourth, rows corresponding exponential cones fifth rows corresponding power cones last. parameter strict_cone_order FALSE, one can specify cones order even repeat order appear matrix. See . parameter strict_cone_order FALSE, one can specify cones order appear matrix. cones argument case named list names matching ^z* indicating primal zero cones, ^l* indicating linear cones, . example, either following valid: list(z = 2L, l = 2L, q = 2L, z = 3L, q = 3L), , list(z1 = 2L, l1 = 2L, q1 = 2L, zb = 3L, qx = 3L), indicating zero cone size 2, followed linear cone size 2, followed second-order cone size 2, followed zero cone size 3, finally second-order cone size 3. Generalized power cones parameters specified named lists, e.g., list(z = 2L, gp1 = list(= c(0.3, 0.7), n = 3L), gp2 = list(= c(0.5, 0.5), n = 1L)). Note strict_cone_order = FALSE, types cone parameters integers, reals explicit since parameters directly passed Rust interface sanity checks!","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":"clarabel-can-solve","dir":"Reference","previous_headings":"","what":"Clarabel can solve","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"linear programs (LPs) second-order cone programs (SOCPs) exponential cone programs (ECPs) power cone programs (PCPs) problems combination cones, defined parameters listed ‚ÄúCone Parameters‚Äù ","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":"cone-parameters","dir":"Reference","previous_headings":"","what":"Cone Parameters","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"table shows cone parameter specifications. Mathematical definitions vignette.","code":""},{"path":[]},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interface to 'Clarabel', an interior point conic solver ‚Äî clarabel","text":"","code":"A <- matrix(c(1, 1), ncol = 1) b <- c(1, 1) obj <- 1 cone <- list(z = 2L) control <- clarabel_control(tol_gap_rel = 1e-7, tol_gap_abs = 1e-7, max_iter = 100) clarabel(A = A, b = b, q = obj, cones = cone, control = control) #> $x #> [1] 1 #>  #> $z #> [1] -0.5 -0.5 #>  #> $s #> [1] 0 0 #>  #> $obj_val #> [1] 1 #>  #> $obj_val_dual #> [1] 1 #>  #> $status #> [1] 2 #>  #> $solve_time #> [1] 0.000120874 #>  #> $iterations #> [1] 0 #>  #> $r_prim #> [1] 0 #>  #> $r_dual #> [1] 0 #>  #> $info #> $info$Œº #> [1] 1 #>  #> $info$sigma #> [1] 1 #>  #> $info$step_length #> [1] 0 #>  #> $info$cost_primal #> [1] 1 #>  #> $info$cost_dual #> [1] 1 #>  #> $info$res_primal #> [1] 0 #>  #> $info$res_dual #> [1] 0 #>  #> $info$res_primal_inf #> [1] 1 #>  #> $info$res_dual_inf #> [1] 1.414214 #>  #> $info$gap_abs #> [1] 0 #>  #> $info$gap_rel #> [1] 0 #>  #> $info$ktratio #> [1] 1 #>  #> $info$solve_time #> [1] 0.000120874 #>  #> $info$iterations #> [1] 0 #>  #> $info$status #> [1] 2 #>  #>"},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters with default values and types in parenthesis ‚Äî clarabel_control","title":"Control parameters with default values and types in parenthesis ‚Äî clarabel_control","text":"Control parameters default values types parenthesis","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters with default values and types in parenthesis ‚Äî clarabel_control","text":"","code":"clarabel_control(   max_iter = 200L,   time_limit = Inf,   verbose = TRUE,   max_step_fraction = 0.99,   tol_gap_abs = 1e-08,   tol_gap_rel = 1e-08,   tol_feas = 1e-08,   tol_infeas_abs = 1e-08,   tol_infeas_rel = 1e-08,   tol_ktratio = 1e-06,   reduced_tol_gap_abs = 5e-05,   reduced_tol_gap_rel = 5e-05,   reduced_tol_feas = 1e-04,   reduced_tol_infeas_abs = 5e-05,   reduced_tol_infeas_rel = 5e-05,   reduced_tol_ktratio = 1e-04,   equilibrate_enable = TRUE,   equilibrate_max_iter = 10L,   equilibrate_min_scaling = 1e-04,   equilibrate_max_scaling = 10000,   linesearch_backtrack_step = 0.8,   min_switch_step_length = 0.1,   min_terminate_step_length = 1e-04,   max_threads = 0L,   direct_kkt_solver = TRUE,   direct_solve_method = c(\"qdldl\", \"mkl\", \"cholmod\"),   static_regularization_enable = TRUE,   static_regularization_constant = 1e-08,   static_regularization_proportional = .Machine$double.eps * .Machine$double.eps,   dynamic_regularization_enable = TRUE,   dynamic_regularization_eps = 1e-13,   dynamic_regularization_delta = 2e-07,   iterative_refinement_enable = TRUE,   iterative_refinement_reltol = 1e-13,   iterative_refinement_abstol = 1e-12,   iterative_refinement_max_iter = 10L,   iterative_refinement_stop_ratio = 5,   presolve_enable = TRUE,   input_sparse_dropzeros = FALSE,   chordal_decomposition_enable = FALSE,   chordal_decomposition_merge_method = c(\"none\", \"parent_child\", \"clique_graph\"),   chordal_decomposition_compact = FALSE,   chordal_decomposition_complete_dual = FALSE )"},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters with default values and types in parenthesis ‚Äî clarabel_control","text":"max_iter maximum number iterations (200L) time_limit maximum run time (seconds) (Inf) verbose verbose printing (TRUE) max_step_fraction maximum interior point step length (0.99) tol_gap_abs absolute duality gap tolerance (1e-8) tol_gap_rel relative duality gap tolerance (1e-8) tol_feas feasibility check tolerance (primal dual) (1e-8) tol_infeas_abs absolute infeasibility tolerance (primal dual) (1e-8) tol_infeas_rel relative infeasibility tolerance (primal dual) (1e-8) tol_ktratio KT tolerance (1e-7) reduced_tol_gap_abs reduced absolute duality gap tolerance (5e-5) reduced_tol_gap_rel reduced relative duality gap tolerance (5e-5) reduced_tol_feas reduced feasibility check tolerance (primal dual) (1e-4) reduced_tol_infeas_abs reduced absolute infeasibility tolerance (primal dual) (5e-5) reduced_tol_infeas_rel reduced relative infeasibility tolerance (primal dual) (5e-5) reduced_tol_ktratio reduced KT tolerance (1e-4) equilibrate_enable enable data equilibration pre-scaling (TRUE) equilibrate_max_iter maximum equilibration scaling iterations (10L) equilibrate_min_scaling minimum equilibration scaling allowed (1e-4) equilibrate_max_scaling maximum equilibration scaling allowed (1e+4) linesearch_backtrack_step linesearch backtracking (0.8) min_switch_step_length minimum step size allowed asymmetric cones PrimalDual scaling (1e-1) min_terminate_step_length minimum step size allowed symmetric cones && asymmetric cones Dual scaling (1e-4) max_threads maximum solver threads multithreaded KKT solvers, 0 lets solver choose (0L) direct_kkt_solver use direct linear solver method (required true) (TRUE) direct_solve_method direct linear solver (\"qdldl\", \"mkl\" \"cholmod\") (\"qdldl\") static_regularization_enable enable KKT static regularization (TRUE) static_regularization_constant KKT static regularization parameter (1e-8) static_regularization_proportional additional regularization parameter w.r.t. maximum abs diagonal term (.Machine.double_eps^2) dynamic_regularization_enable enable KKT dynamic regularization (TRUE) dynamic_regularization_eps KKT dynamic regularization threshold (1e-13) dynamic_regularization_delta KKT dynamic regularization shift (2e-7) iterative_refinement_enable KKT solve iterative refinement (TRUE) iterative_refinement_reltol iterative refinement relative tolerance (1e-12) iterative_refinement_abstol iterative refinement absolute tolerance (1e-12) iterative_refinement_max_iter iterative refinement maximum iterations (10L) iterative_refinement_stop_ratio iterative refinement stalling tolerance (5.0) presolve_enable whether enable presolvle (TRUE) input_sparse_dropzeros explicitly drop structural zeros sparse data inputs (FALSE); see details chordal_decomposition_enable whether enable chordal decomposition SDPs (FALSE) chordal_decomposition_merge_method chordal decomposition merge method, one 'none', 'parent_child' 'clique_graph', SDPs ('none') chordal_decomposition_compact boolean flag SDPs indicating whether assemble decomposed system compact form SDPs (FALSE) chordal_decomposition_complete_dual boolean flag indicating complete PSD dual variables decomposition SDPs","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters with default values and types in parenthesis ‚Äî clarabel_control","text":"list containing control parameters.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/clarabel_control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control parameters with default values and types in parenthesis ‚Äî clarabel_control","text":"Setting input_sparse_dropzeros TRUE disable parametric updating functionality. See documentation ‚Äòdropzeros‚Äô Rust struct CscMatrix dropping structural zeros passing solver.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/solver_status_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the solver status description as a named character vector ‚Äî solver_status_descriptions","title":"Return the solver status description as a named character vector ‚Äî solver_status_descriptions","text":"Return solver status description named character vector","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/solver_status_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the solver status description as a named character vector ‚Äî solver_status_descriptions","text":"","code":"solver_status_descriptions()"},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/solver_status_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the solver status description as a named character vector ‚Äî solver_status_descriptions","text":"named list solver status descriptions, order status codes returned solver","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/reference/solver_status_descriptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the solver status description as a named character vector ‚Äî solver_status_descriptions","text":"","code":"solver_status_descriptions()[2] ## for solved problem #>                               Solved  #> \"Solver terminated with a solution.\"  solver_status_descriptions()[8] ## for max iterations limit reached #>                                                                MaxIterations  #> \"Iteration limit reached before solution or infeasibility certificate found\""},{"path":"https://oxfordcontrol.github.io/clarabel-r/news/index.html","id":"clarabel-0111","dir":"Changelog","previous_headings":"","what":"clarabel 0.11.1","title":"clarabel 0.11.1","text":"Synced v0.11.1 Clarabel.rs Fixed flang issues shown CRAN fedora-clang-rdevel","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/news/index.html","id":"clarabel-0101","dir":"Changelog","previous_headings":"","what":"clarabel 0.10.1","title":"clarabel 0.10.1","text":"CRAN release: 2025-04-17 Minor fixes fix CRAN issues","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/news/index.html","id":"clarabel-0100","dir":"Changelog","previous_headings":"","what":"clarabel 0.10.0","title":"clarabel 0.10.0","text":"CRAN release: 2025-02-18 Synced v0.10.0 Clarabel.rs Fixed use new r-src detects R used correctly (thank , Ivan Krylov!)","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/news/index.html","id":"clarabel-0901","dir":"Changelog","previous_headings":"","what":"clarabel 0.9.0.1","title":"clarabel 0.9.0.1","text":"CRAN release: 2024-09-03 Explicit system requirements Rust Cargo added.","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/news/index.html","id":"clarabel-090","dir":"Changelog","previous_headings":"","what":"clarabel 0.9.0","title":"clarabel 0.9.0","text":"CRAN release: 2024-06-22 Synced version 0.9.0 Clarabel.rs Added applicable tests Clarabel.rs Updated documentation cone specification Updated vignette Switched savvy rextendr","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/news/index.html","id":"clarabel-051","dir":"Changelog","previous_headings":"","what":"clarabel 0.5.1","title":"clarabel 0.5.1","text":"CRAN release: 2023-06-24 Clarabel now supports semidefinite programs (syncing version 0.5.1 Clarabel.rs) Added tests Updated documentation cone specification","code":""},{"path":"https://oxfordcontrol.github.io/clarabel-r/news/index.html","id":"clarabel-041","dir":"Changelog","previous_headings":"","what":"clarabel 0.4.1","title":"clarabel 0.4.1","text":"CRAN release: 2023-04-25 First public release","code":""}]
