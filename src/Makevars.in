TARGET = @TARGET@
R_HOME = @R_HOME@
VENDORING = yes
VENDOR_SRC = ./rust/vendor.tar.xz
VENDOR_DIR = ./rust/vendor

# catch DEBUG envvar, which is passed from pkgbuild::compile_dll()
PROFILE = $(subst x,release,$(subst truex,dev,$(DEBUG)x))

TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/release
STATLIB = $(LIBDIR)/libclarabel.a
PKG_LIBS = -L$(LIBDIR) -lclarabel $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)

CARGOTMP = $(CURDIR)/rust/.cargo
CARGO_BUILD_ARGS = -j 2 --lib --manifest-path=./rust/Cargo.toml --target-dir $(TARGET_DIR)
RUST_BACKTRACE=1

all: $(SHLIB) clean_intermediate

$(SHLIB): $(STATLIB)

$(STATLIB):
	# In some environments, ~/.cargo/bin might not be included in PATH, so we need
	# to set it here to ensure cargo can be invoked. It is appended to PATH and
	# therefore is only used if cargo is absent from the user's PATH.
	export PATH="$(PATH):$(HOME)/.cargo/bin" && \
	  echo "Rust version:" `rustc --version` && \
	  echo "Cargo version:" `cargo --version` && \
	  if [ "$(TARGET)" != "wasm32-unknown-emscripten" ]; then \
	    if [ "$(VENDORING)" = "yes" ]; then \
	      mkdir -p $(CARGOTMP);  \
	      cp ./rust/cargo_vendor_config.toml $(CARGOTMP)/config.toml;  \
	      $(TAR) --extract --xz -f $(VENDOR_SRC) -C ./rust ;  \
	      export CARGO_HOME=$(CARGOTMP);  \
	      export R_HOME=$(R_HOME);  \
	      export PATH="$(PATH):$(HOME)/.cargo/bin";  \
	      cargo build $(CARGO_BUILD_ARGS) --release --offline; \
	    else \
	      cargo build $(CARGO_BUILD_ARGS); \
	    fi \
	  else \
	    export CC="$(CC)" && \
	    export R_HOME="$(R_HOME)" && \
	    export CFLAGS="$(CFLAGS)" && \
	    export CARGO_PROFILE_DEV_PANIC="abort" && \
	    export CARGO_PROFILE_RELEASE_PANIC="abort" && \
	    cargo +nightly build $(CARGO_BUILD_ARGS) -Zbuild-std=panic_abort,std; \
	  fi
	rm -Rf $(CARGOTMP)
	rm -Rf $(VENDOR_DIR)
	rm -Rf $(LIBDIR)/build

clean_intermediate: $(SHLIB)
	rm -f $(STATLIB)

clean:
	rm -Rf $(SHLIB) $(OBJECTS) $(STATLIB) ./rust/target

.PHONY: all clean_intermediate clean
