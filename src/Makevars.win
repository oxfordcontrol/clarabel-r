TARGET = x86_64-pc-windows-gnu

VENDOR_DIR = ./rust/vendor

# catch DEBUG envvar, which is passed from pkgbuild::compile_dll()
PROFILE = $(subst x,release,$(subst truex,dev,$(DEBUG)x))

TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/release
STATLIB = $(LIBDIR)/libclarabel.a
PKG_LIBS = -L$(LIBDIR) -lclarabel -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)

CARGOTMP = $(CURDIR)/rust/.cargo

# Rtools doesn't have the linker in the location that cargo expects, so we need
# to overwrite it via configuration.
CARGO_LINKER = x86_64-w64-mingw32.static.posix-gcc.exe

all: $(SHLIB) clean_intermediate

$(SHLIB): $(STATLIB)

$(STATLIB):
	# When the GNU toolchain is used (i.e. on CRAN), -lgcc_eh is specified for
	# building proc-macro2, but Rtools doesn't contain libgcc_eh. This isn't used
	# in actual, but we need this tweak to please the compiler.
	mkdir -p $(LIBDIR)/libgcc_mock && touch $(LIBDIR)/libgcc_mock/libgcc_eh.a
	mkdir -p $(CARGOTMP) && cp ./rust/cargo_vendor_config.toml $(CARGOTMP)/config.toml
	$(TAR) --extract --xz -f ./rust/vendor.tar.xz -C ./rust 
	export CARGO_HOME="$(CARGOTMP)" && \
	  export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
	  export R_HOME="$(R_HOME)" && \
	  export LIBRARY_PATH="$${LIBRARY_PATH};$(LIBDIR)/libgcc_mock" && \
	  cargo build -j 2 --target $(TARGET) --lib --offline --release --manifest-path ./rust/Cargo.toml --target-dir $(TARGET_DIR)
	rm -Rf $(CARGOTMP)
	rm -Rf $(VENDOR_DIR)
	rm -Rf $(LIBDIR)/build

clean_intermediate: $(SHLIB)
	rm -f $(STATLIB)

clean:
	rm -Rf $(SHLIB) $(OBJECTS) $(STATLIB) ./rust/target

.PHONY: all clean_intermediate clean
